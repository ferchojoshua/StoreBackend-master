// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Store.Data;

#nullable disable

namespace Store.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221003192914_UpdateKardex")]
    partial class UpdateKardex
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AlmacenUser", b =>
                {
                    b.Property<int>("StoreAccessId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StoreAccessId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AlmacenUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Store.Entities.Abono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FechaAbono")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnulado")
                        .HasColumnType("bit");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RealizedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RealizedById");

                    b.HasIndex("SaleId");

                    b.HasIndex("StoreId");

                    b.ToTable("Abonos");
                });

            modelBuilder.Entity("Store.Entities.Almacen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Meta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Almacen");
                });

            modelBuilder.Entity("Store.Entities.CajaMovment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CajaTipoId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Entradas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("RealizadoPorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Salidas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CajaTipoId");

                    b.HasIndex("RealizadoPorId");

                    b.HasIndex("StoreId");

                    b.ToTable("CajaMovments");
                });

            modelBuilder.Entity("Store.Entities.CajaTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CajaName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CajaTipos");
                });

            modelBuilder.Entity("Store.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Point>("ClientCoords")
                        .HasColumnType("geography");

                    b.Property<int?>("CommunityId")
                        .HasColumnType("int");

                    b.Property<int>("ContadorCompras")
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadoPorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CreditoConsumido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacturasVencidas")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEdicion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LimiteCredito")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NombreCliente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreComercial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SaldoVencido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoCliente")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CreadoPorId");

                    b.HasIndex("StoreId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Store.Entities.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("Store.Entities.Count", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClasificacionId")
                        .HasColumnType("int");

                    b.Property<int?>("CountGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClasificacionId");

                    b.HasIndex("CountGroupId");

                    b.ToTable("Counts");
                });

            modelBuilder.Entity("Store.Entities.CountAsientoContable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FuenteContableId")
                        .HasColumnType("int");

                    b.Property<int?>("LibroContableId")
                        .HasColumnType("int");

                    b.Property<string>("Referencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FuenteContableId");

                    b.HasIndex("LibroContableId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("CountAsientosContables");
                });

            modelBuilder.Entity("Store.Entities.CountAsientoContableDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountAsientoContableId")
                        .HasColumnType("int");

                    b.Property<decimal>("Credito")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CuentaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Debito")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CountAsientoContableId");

                    b.HasIndex("CuentaId");

                    b.ToTable("CountAsientoContableDetails");
                });

            modelBuilder.Entity("Store.Entities.CountCodeStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CountCodeStructures");
                });

            modelBuilder.Entity("Store.Entities.CountFuentesContables", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CountFuentesContables");
                });

            modelBuilder.Entity("Store.Entities.CountGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CountGroups");
                });

            modelBuilder.Entity("Store.Entities.CountLibros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CountLibros");
                });

            modelBuilder.Entity("Store.Entities.CuentasXCobrarDailyCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlmacenId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontoVenta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("ClienteId");

                    b.ToTable("CuentasXCobrarDailyChecks");
                });

            modelBuilder.Entity("Store.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Store.Entities.Existence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlmacenId")
                        .HasColumnType("int");

                    b.Property<int>("Existencia")
                        .HasColumnType("int");

                    b.Property<int>("Maximo")
                        .HasColumnType("int");

                    b.Property<int>("Minimo")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioVentaDetalle")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioVentaMayor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Existences");
                });

            modelBuilder.Entity("Store.Entities.ExistencesDailyCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlmacenId")
                        .HasColumnType("int");

                    b.Property<int>("Existencia")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ExistencesDailyChecks");
                });

            modelBuilder.Entity("Store.Entities.Facturacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnulatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoDescuento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DescuentoXMonto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescuentoXPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FacturedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaAnulacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnulado")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContado")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDescuento")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEventual")
                        .HasColumnType("bit");

                    b.Property<decimal>("MontoVenta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoVentaAntesDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NombreCliente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaidById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnulatedById");

                    b.HasIndex("ClientId");

                    b.HasIndex("FacturedById");

                    b.HasIndex("PaidById");

                    b.HasIndex("SaleId");

                    b.HasIndex("StoreId");

                    b.ToTable("Facturacions");
                });

            modelBuilder.Entity("Store.Entities.FacturaDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnulatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("CodigoDescuento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CostoCompra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoTotalAntesDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoTotalDespuesDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescuentoXPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FacturacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAnulacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnulado")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDescuento")
                        .HasColumnType("bit");

                    b.Property<decimal>("PVD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PVM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnulatedById");

                    b.HasIndex("FacturacionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("FacturaDetails");
                });

            modelBuilder.Entity("Store.Entities.Familia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TipoNegocioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoNegocioId");

                    b.ToTable("Familias");
                });

            modelBuilder.Entity("Store.Entities.Kardex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlmacenId")
                        .HasColumnType("int");

                    b.Property<string>("Concepto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Entradas")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Saldo")
                        .HasColumnType("int");

                    b.Property<int>("Salidas")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Kardex");
                });

            modelBuilder.Entity("Store.Entities.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abreviatura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("Store.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<int?>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Store.Entities.ProductIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlmacenId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<decimal>("MontFactAntDesc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoFactura")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NoFactura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("TipoEntrada")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPago")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlmacenId");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProductIns");
                });

            modelBuilder.Entity("Store.Entities.ProductInDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("CostUnitDespDesc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoCompra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioVentaDetalle")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioVentaMayor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductInId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductInId");

                    b.ToTable("ProductInDetails");
                });

            modelBuilder.Entity("Store.Entities.ProductMovmentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AlmacenDestinoId")
                        .HasColumnType("int");

                    b.Property<int>("AlmacenProcedenciaId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("ProductMovmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductMovmentId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductMovmentDetails");
                });

            modelBuilder.Entity("Store.Entities.ProductMovments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Concepto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProductMovments");
                });

            modelBuilder.Entity("Store.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FamiliaId")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TipoNegocioId")
                        .HasColumnType("int");

                    b.Property<string>("UM")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FamiliaId");

                    b.HasIndex("TipoNegocioId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Store.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Store.Entities.Rack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlmacenId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlmacenId");

                    b.ToTable("Racks");
                });

            modelBuilder.Entity("Store.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndOperations")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsServerAccess")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartOperations")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasFilter("[RoleName] IS NOT NULL");

                    b.ToTable("Rols");
                });

            modelBuilder.Entity("Store.Entities.SaleAnulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnulatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaAnulacion")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontoAnulado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("VentaAfectadaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnulatedById");

                    b.HasIndex("StoreId");

                    b.HasIndex("VentaAfectadaId");

                    b.ToTable("SaleAnulations");
                });

            modelBuilder.Entity("Store.Entities.SaleAnulationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CantidadAnulada")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAnulacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SaleAnulationId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleDetailAfectadoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaleAnulationId");

                    b.HasIndex("SaleDetailAfectadoId");

                    b.ToTable("SaleAnulationDetails");
                });

            modelBuilder.Entity("Store.Entities.SaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnulatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CantidadAnulada")
                        .HasColumnType("int");

                    b.Property<string>("CodigoDescuento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CostoCompra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoTotalAntesDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoTotalDespuesDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescuentoXPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("FechaAnulacion")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Ganancia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAnulado")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDescuento")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartialAnulation")
                        .HasColumnType("bit");

                    b.Property<decimal>("PVD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PVM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnulatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesId");

                    b.HasIndex("StoreId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("Store.Entities.Sales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnulatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoDescuento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DescuentoXMonto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescuentoXPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FacturedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaAnulacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAnulado")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContado")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDescuento")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEventual")
                        .HasColumnType("bit");

                    b.Property<decimal>("MontoVenta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoVentaAntesDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NombreCliente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnulatedById");

                    b.HasIndex("ClientId");

                    b.HasIndex("FacturedById");

                    b.HasIndex("StoreId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Store.Entities.TipoNegocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasFilter("[Description] IS NOT NULL");

                    b.ToTable("TipoNegocios");
                });

            modelBuilder.Entity("Store.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUserMiration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActiveSession")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDarkMode")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultPass")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UserSessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RolId");

                    b.HasIndex("UserSessionId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Store.Entities.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpirationDateToken")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserBrowser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserSO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSession");
                });

            modelBuilder.Entity("AlmacenUser", b =>
                {
                    b.HasOne("Store.Entities.Almacen", null)
                        .WithMany()
                        .HasForeignKey("StoreAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Store.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Store.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Store.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Entities.Abono", b =>
                {
                    b.HasOne("Store.Entities.User", "RealizedBy")
                        .WithMany()
                        .HasForeignKey("RealizedById");

                    b.HasOne("Store.Entities.Sales", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId");

                    b.HasOne("Store.Entities.Almacen", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("RealizedBy");

                    b.Navigation("Sale");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Store.Entities.CajaMovment", b =>
                {
                    b.HasOne("Store.Entities.CajaTipo", "CajaTipo")
                        .WithMany()
                        .HasForeignKey("CajaTipoId");

                    b.HasOne("Store.Entities.User", "RealizadoPor")
                        .WithMany()
                        .HasForeignKey("RealizadoPorId");

                    b.HasOne("Store.Entities.Almacen", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("CajaTipo");

                    b.Navigation("RealizadoPor");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Store.Entities.Client", b =>
                {
                    b.HasOne("Store.Entities.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId");

                    b.HasOne("Store.Entities.User", "CreadoPor")
                        .WithMany()
                        .HasForeignKey("CreadoPorId");

                    b.HasOne("Store.Entities.Almacen", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Community");

                    b.Navigation("CreadoPor");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Store.Entities.Community", b =>
                {
                    b.HasOne("Store.Entities.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("Store.Entities.Count", b =>
                {
                    b.HasOne("Store.Entities.CountCodeStructure", "Clasificacion")
                        .WithMany()
                        .HasForeignKey("ClasificacionId");

                    b.HasOne("Store.Entities.CountGroup", "CountGroup")
                        .WithMany()
                        .HasForeignKey("CountGroupId");

                    b.Navigation("Clasificacion");

                    b.Navigation("CountGroup");
                });

            modelBuilder.Entity("Store.Entities.CountAsientoContable", b =>
                {
                    b.HasOne("Store.Entities.CountFuentesContables", "FuenteContable")
                        .WithMany()
                        .HasForeignKey("FuenteContableId");

                    b.HasOne("Store.Entities.CountLibros", "LibroContable")
                        .WithMany()
                        .HasForeignKey("LibroContableId");

                    b.HasOne("Store.Entities.Almacen", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("Store.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("FuenteContable");

                    b.Navigation("LibroContable");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Entities.CountAsientoContableDetails", b =>
                {
                    b.HasOne("Store.Entities.CountAsientoContable", null)
                        .WithMany("CountAsientoContableDetails")
                        .HasForeignKey("CountAsientoContableId");

                    b.HasOne("Store.Entities.Count", "Cuenta")
                        .WithMany()
                        .HasForeignKey("CuentaId");

                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("Store.Entities.CuentasXCobrarDailyCheck", b =>
                {
                    b.HasOne("Store.Entities.Almacen", "Almacen")
                        .WithMany()
                        .HasForeignKey("AlmacenId");

                    b.HasOne("Store.Entities.Client", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.Navigation("Almacen");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Store.Entities.Existence", b =>
                {
                    b.HasOne("Store.Entities.Almacen", "Almacen")
                        .WithMany()
                        .HasForeignKey("AlmacenId");

                    b.HasOne("Store.Entities.Producto", "Producto")
                        .WithMany("Existences")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Almacen");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Store.Entities.ExistencesDailyCheck", b =>
                {
                    b.HasOne("Store.Entities.Almacen", "Almacen")
                        .WithMany()
                        .HasForeignKey("AlmacenId");

                    b.HasOne("Store.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");

                    b.Navigation("Almacen");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Store.Entities.Facturacion", b =>
                {
                    b.HasOne("Store.Entities.User", "AnulatedBy")
                        .WithMany()
                        .HasForeignKey("AnulatedById");

                    b.HasOne("Store.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Store.Entities.User", "FacturedBy")
                        .WithMany()
                        .HasForeignKey("FacturedById");

                    b.HasOne("Store.Entities.User", "PaidBy")
                        .WithMany()
                        .HasForeignKey("PaidById");

                    b.HasOne("Store.Entities.Sales", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId");

                    b.HasOne("Store.Entities.Almacen", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("AnulatedBy");

                    b.Navigation("Client");

                    b.Navigation("FacturedBy");

                    b.Navigation("PaidBy");

                    b.Navigation("Sale");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Store.Entities.FacturaDetails", b =>
                {
                    b.HasOne("Store.Entities.User", "AnulatedBy")
                        .WithMany()
                        .HasForeignKey("AnulatedById");

                    b.HasOne("Store.Entities.Facturacion", null)
                        .WithMany("FacturaDetails")
                        .HasForeignKey("FacturacionId");

                    b.HasOne("Store.Entities.Producto", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Store.Entities.Almacen", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("AnulatedBy");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Store.Entities.Familia", b =>
                {
                    b.HasOne("Store.Entities.TipoNegocio", null)
                        .WithMany("Familias")
                        .HasForeignKey("TipoNegocioId");
                });

            modelBuilder.Entity("Store.Entities.Kardex", b =>
                {
                    b.HasOne("Store.Entities.Almacen", "Almacen")
                        .WithMany()
                        .HasForeignKey("AlmacenId");

                    b.HasOne("Store.Entities.Producto", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Store.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Almacen");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Entities.Municipality", b =>
                {
                    b.HasOne("Store.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Store.Entities.Permission", b =>
                {
                    b.HasOne("Store.Entities.Rol", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RolId");
                });

            modelBuilder.Entity("Store.Entities.ProductIn", b =>
                {
                    b.HasOne("Store.Entities.Almacen", "Almacen")
                        .WithMany()
                        .HasForeignKey("AlmacenId");

                    b.HasOne("Store.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.Navigation("Almacen");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Store.Entities.ProductInDetails", b =>
                {
                    b.HasOne("Store.Entities.Producto", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Store.Entities.ProductIn", null)
                        .WithMany("ProductInDetails")
                        .HasForeignKey("ProductInId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Entities.ProductMovmentDetails", b =>
                {
                    b.HasOne("Store.Entities.ProductMovments", "ProductMovment")
                        .WithMany("MovmentDetails")
                        .HasForeignKey("ProductMovmentId");

                    b.HasOne("Store.Entities.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");

                    b.Navigation("ProductMovment");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Store.Entities.ProductMovments", b =>
                {
                    b.HasOne("Store.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Entities.Producto", b =>
                {
                    b.HasOne("Store.Entities.Familia", "Familia")
                        .WithMany()
                        .HasForeignKey("FamiliaId");

                    b.HasOne("Store.Entities.TipoNegocio", "TipoNegocio")
                        .WithMany()
                        .HasForeignKey("TipoNegocioId");

                    b.Navigation("Familia");

                    b.Navigation("TipoNegocio");
                });

            modelBuilder.Entity("Store.Entities.Rack", b =>
                {
                    b.HasOne("Store.Entities.Almacen", "Almacen")
                        .WithMany()
                        .HasForeignKey("AlmacenId");

                    b.Navigation("Almacen");
                });

            modelBuilder.Entity("Store.Entities.SaleAnulation", b =>
                {
                    b.HasOne("Store.Entities.User", "AnulatedBy")
                        .WithMany()
                        .HasForeignKey("AnulatedById");

                    b.HasOne("Store.Entities.Almacen", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("Store.Entities.Sales", "VentaAfectada")
                        .WithMany()
                        .HasForeignKey("VentaAfectadaId");

                    b.Navigation("AnulatedBy");

                    b.Navigation("Store");

                    b.Navigation("VentaAfectada");
                });

            modelBuilder.Entity("Store.Entities.SaleAnulationDetails", b =>
                {
                    b.HasOne("Store.Entities.SaleAnulation", null)
                        .WithMany("SaleAnulationDetails")
                        .HasForeignKey("SaleAnulationId");

                    b.HasOne("Store.Entities.SaleDetail", "SaleDetailAfectado")
                        .WithMany()
                        .HasForeignKey("SaleDetailAfectadoId");

                    b.Navigation("SaleDetailAfectado");
                });

            modelBuilder.Entity("Store.Entities.SaleDetail", b =>
                {
                    b.HasOne("Store.Entities.User", "AnulatedBy")
                        .WithMany()
                        .HasForeignKey("AnulatedById");

                    b.HasOne("Store.Entities.Producto", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Store.Entities.Sales", "Sales")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SalesId");

                    b.HasOne("Store.Entities.Almacen", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("AnulatedBy");

                    b.Navigation("Product");

                    b.Navigation("Sales");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Store.Entities.Sales", b =>
                {
                    b.HasOne("Store.Entities.User", "AnulatedBy")
                        .WithMany()
                        .HasForeignKey("AnulatedById");

                    b.HasOne("Store.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Store.Entities.User", "FacturedBy")
                        .WithMany()
                        .HasForeignKey("FacturedById");

                    b.HasOne("Store.Entities.Almacen", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("AnulatedBy");

                    b.Navigation("Client");

                    b.Navigation("FacturedBy");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Store.Entities.User", b =>
                {
                    b.HasOne("Store.Entities.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId");

                    b.HasOne("Store.Entities.UserSession", "UserSession")
                        .WithMany()
                        .HasForeignKey("UserSessionId");

                    b.Navigation("Rol");

                    b.Navigation("UserSession");
                });

            modelBuilder.Entity("Store.Entities.CountAsientoContable", b =>
                {
                    b.Navigation("CountAsientoContableDetails");
                });

            modelBuilder.Entity("Store.Entities.Facturacion", b =>
                {
                    b.Navigation("FacturaDetails");
                });

            modelBuilder.Entity("Store.Entities.ProductIn", b =>
                {
                    b.Navigation("ProductInDetails");
                });

            modelBuilder.Entity("Store.Entities.ProductMovments", b =>
                {
                    b.Navigation("MovmentDetails");
                });

            modelBuilder.Entity("Store.Entities.Producto", b =>
                {
                    b.Navigation("Existences");
                });

            modelBuilder.Entity("Store.Entities.Rol", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Store.Entities.SaleAnulation", b =>
                {
                    b.Navigation("SaleAnulationDetails");
                });

            modelBuilder.Entity("Store.Entities.Sales", b =>
                {
                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("Store.Entities.TipoNegocio", b =>
                {
                    b.Navigation("Familias");
                });
#pragma warning restore 612, 618
        }
    }
}
